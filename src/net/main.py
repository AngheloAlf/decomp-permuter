import abc
from argparse import ArgumentParser, Namespace, RawDescriptionHelpFormatter
from .server import ServerOptions
from .server_main import server_main


class Command(abc.ABC):
    command: str
    help: str

    @staticmethod
    @abc.abstractmethod
    def add_arguments(parser: ArgumentParser) -> None:
        ...

    @staticmethod
    @abc.abstractmethod
    def run(args: Namespace) -> None:
        ...


class RunServerCommand(Command):
    command = "run-server"
    help = (
        "Run a permuter server, allowing anyone with access to the central "
        "server to run sandboxed permuter jobs on your machine."
    )

    @staticmethod
    def add_arguments(parser: ArgumentParser) -> None:
        parser.add_argument(
            "--host",
            dest="host",
            default="0.0.0.0",
            help="Hostname to listen on. (default: %(default)s)",
        )
        parser.add_argument(
            "--port",
            dest="port",
            type=int,
            required=True,
            help="Port to listen on.",
        )
        parser.add_argument(
            "--cpus",
            dest="num_cpus",
            metavar="CPUS",
            type=float,
            required=True,
            help="Number of CPUs to use (float).",
        )
        parser.add_argument(
            "--memory",
            dest="max_memory_gb",
            metavar="MEMORY_GB",
            type=float,
            required=True,
            help="Restrict the sandboxed process to the given amount of memory in "
            "gigabytes (float). If this limit is hit, the permuter will crash "
            "horribly, but at least your system won't lock up.",
        )
        parser.add_argument(
            "--systray",
            dest="systray",
            action="store_true",
            help="Make the server controllable through the system tray.",
        )
        parser.add_argument(
            "--min-priority",
            dest="min_priority",
            metavar="PRIORITY",
            type=float,
            default=0.1,
            help="Only accept jobs from clients who pass --priority with a number "
            "higher or equal to this value. (default: %(default)s)",
        )

    @staticmethod
    def run(args: Namespace) -> None:
        options = ServerOptions(
            host=args.host,
            port=args.port,
            num_cpus=args.num_cpus,
            max_memory_gb=args.max_memory_gb,
            min_priority=args.min_priority,
            systray=args.systray,
        )

        server_main(options)


class SetupCommand(Command):
    command = "setup"
    help = (
        "Set up permuter@home. This will require someone else to grant you "
        "access to the central server."
    )

    @staticmethod
    def add_arguments(parser: ArgumentParser) -> None:
        pass

    @staticmethod
    def run(args: Namespace) -> None:
        pass


class VouchCommand(Command):
    command = "vouch"
    help = "Give someone access to the central server."

    @staticmethod
    def add_arguments(parser: ArgumentParser) -> None:
        parser.add_argument(
            "magic",
            help="Opaque hex string generated by 'setup'.",
        )

    @staticmethod
    def run(args: Namespace) -> None:
        pass


def main() -> None:
    parser = ArgumentParser(
        description="permuter@home - run the permuter across the Internet!\n\n"
        "To use p@h as a client, just pass -J when running the permuter. "
        "This script is\nonly necessary for configuration or when running a server.",
        formatter_class=RawDescriptionHelpFormatter,
    )

    commands = [
        RunServerCommand,
        SetupCommand,
        VouchCommand,
    ]

    subparsers = parser.add_subparsers(metavar="<command>")
    for command in commands:
        subparser = subparsers.add_parser(
            command.command,
            help=command.help,
            description=command.help,
        )
        command.add_arguments(subparser)
        subparser.set_defaults(func=command.run)

    args = parser.parse_args()
    if "func" in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
